Timestamp,How long have you been working as an iOS developer?,Which programming languages are you proficient in for iOS development? (Select all that apply),Have you used SwiftUI in your iOS app development?,"For those who have adopted SwiftUI (extensively or primarily), what benefits have you experienced compared to UIKit? (Select all that apply)","If you have not yet adopted SwiftUI, what are the primary reasons? (Select all that apply)","If you have tried to adapt SwiftUI, how challenging was the learning curve when transitioning from UIKit to SwiftUI?",Are you planning to transition all your future iOS projects to SwiftUI?,How frequently do you explore SwiftUI updates and new features from Apple's WWDC sessions or other sources?,Have you encountered any specific issues or limitations with SwiftUI that affected your development process or app performance?,Would you recommend SwiftUI to other iOS developers? Why or why not?,Are there any additional comments or insights you'd like to share about your experiences with SwiftUI in iOS development?,"If your current projects are built using UIKit and you wish to incorporate SwiftUI views, are you opting to rewrite them using UIHostingController, or are you planning to fully adapt SwiftUI for those projects?"
7/23/2023 21:42:18,5+ years,"Swift, Objective-C","Yes, we have adapted completely SwiftUI for the app","Faster development time, Declarative syntax for building UI, Integration with SwiftUI's new features",Compatibility issues with older iOS versions,Somewhat challenging,"Yes, exclusively SwiftUI",Regularly,,,,
7/23/2023 21:44:16,1-2 years,"Swift, Objective-C","Yes, extensively in View Controllers using UIHostingController","Faster development time, Declarative syntax for building UI, Integration with SwiftUI's new features",,Moderately challenging,"Yes, exclusively SwiftUI",During development,,,,
7/23/2023 21:48:50,5+ years,Swift,"Yes, we have adapted completely SwiftUI for the app","Faster development time, Enhanced responsiveness and fluid animations, Improved code readability and maintainability, Integration with SwiftUI's new features, It's more fun.",,Not challenging at all,"Yes, exclusively SwiftUI",Regularly,,Yes,,
7/23/2023 22:08:57,2-5 years,Swift,"Yes, we have completely adapted SwiftUI for the app",Integration with SwiftUI's new features,Compatibility issues with older iOS versions,Somewhat challenging,"Yes, but only for certain projects",Occasionally,no,no,no,
7/23/2023 22:51:25,2-5 years,"Swift, Objective-C","No, but I'm considering it",Declarative syntax for building UI,,Moderately challenging,"No, I'll stick with UIKit",Occasionally,No,No,No,
7/24/2023 0:30:32,5+ years,"Swift, Objective-C","Yes, extensively in View Controllers using UIHostingController","Faster development time, Declarative syntax for building UI, Enhanced responsiveness and fluid animations, Improved code readability and maintainability",,Moderately challenging,"Yes, but only for certain projects",During development,,,,
7/24/2023 1:26:50,5+ years,Swift,"Yes, extensively in View Controllers using UIHostingController","Faster development time, Improved code readability and maintainability, Integration with SwiftUI's new features","Existing projects are built using UIKit, Compatibility issues with older iOS versions",Moderately challenging,Undecided,Occasionally,"yes, on the development side, there are many things missing or causing annoying UX",it depends on the minimum deployment target,I haven't used yet much SwiftUI in production apps. I have used it mostly for learning projects. ,
7/24/2023 1:54:56,2-5 years,"Swift, Objective-C","No, but I'm considering it",Integration with SwiftUI's new features,Compatibility issues with older iOS versions,Moderately challenging,"Yes, but only for certain projects",Occasionally,,,,
7/24/2023 12:29:02,2-5 years,Swift,"Yes, but only in some parts of the app using View Controllers using UIHostingController",Faster development time,,Moderately challenging,Undecided,Occasionally,"- setting breakpoints doesn't work in a swiftUI view.
- SwiftUI Preview Canvas is being counted for code coverage, where it shouldnt be. My company tracks code coverage numbers, so as a workaround, we either comment out the canvas code or completely exclude it.",,,
7/24/2023 12:46:30,1-2 years,Swift,"Yes, we have completely adapted SwiftUI for the app","Faster development time, Declarative syntax for building UI, Enhanced responsiveness and fluid animations, Improved code readability and maintainability, Integration with SwiftUI's new features",,Not challenging at all,"Yes, exclusively SwiftUI",Regularly,"Frankly, no. There are times when something can't be done with purely SwiftUI, but mixing in a little UIKit is no problem.","Absolutely- but with a caveat: it is most likely harder to be pure SwiftUI at a larger company, and many startups have smaller teams (1-2), and won't be hiring anyone junior. So I'd absolutely recommend it to anyone with experience, but someone coming right out of college will have to learn UIKit as well.","I started learning/developing in SwiftUI as soon as it was released, and I've never looked back! Frankly, it is so fun to develop in that I wouldn't even consider a position that wasn't almost purely SwiftUI at this point.",
7/24/2023 22:38:37,2-5 years,Swift,"Yes, we have completely adapted SwiftUI for the app","Faster development time, Declarative syntax for building UI, Enhanced responsiveness and fluid animations, Improved code readability and maintainability, Integration with SwiftUI's new features",Compatibility issues with older iOS versions,Moderately challenging,"Yes, exclusively SwiftUI",Occasionally,Architecture pattern selection ,"Easy to develop and maintain
Smaller code base
Lightweight app",,Fully adapting SwiftUI for the current projects built with UIKit
7/24/2023 23:58:19,2-5 years,"Swift, Objective-C","Yes, we have completely adapted SwiftUI for the app","Faster development time, Declarative syntax for building UI, Improved code readability and maintainability, Integration with SwiftUI's new features",,Moderately challenging,"Yes, exclusively SwiftUI",Regularly,N/A,,,Fully adapting SwiftUI for the current projects built with UIKit
7/25/2023 0:38:14,2-5 years,Swift,"Yes, we have completely adapted SwiftUI for the app","Declarative syntax for building UI, Improved code readability and maintainability",,Somewhat challenging,"Yes, exclusively SwiftUI",Occasionally,Annotating Maps,"Yes, it works best with newest APIs",,
7/25/2023 0:53:30,5+ years,"Swift, Objective-C","Yes, we have completely adapted SwiftUI for the app","Faster development time, Declarative syntax for building UI, Enhanced responsiveness and fluid animations, Improved code readability and maintainability, Integration with SwiftUI's new features, Custom controls, reusablity ","Compatibility issues with older iOS versions, Time factor between learning & adopting",Not challenging at all,"Yes, exclusively SwiftUI",Regularly,No,Sure it’s the future!,It’s always great to keep learning & adopting SwiftUI ,If there is enough time to rewrite or encapsulate then it’s good otherwise combination of both does also has good advantages.
7/25/2023 2:14:32,5+ years,"Swift, Objective-C","No, but I'm considering it","Faster development time, Declarative syntax for building UI","Lack of familiarity with SwiftUI, Existing projects are built using UIKit, Concerns about SwiftUI's maturity/stability, Compatibility issues with older iOS versions",Somewhat challenging,"Yes, exclusively SwiftUI",Regularly,"Yes no support for backward compatibility below iOS 13 and frequent updates in swiftUI makes it difficult for adoption in projects.

",Yes. SwiftUI is less code and easy than UIKit actually if we become familiar . Apple also promotes SwiftUI in its WWDC. Some of good new and I test eating features can only be done in swiftUI,"SwiftUI reduces time while coding and it takes less lines of code which requires long time and more lines in UIKit.
No laggy UI interface builder and storyboard or auto layout constrains pain makes it easy to make UI.
But not being able to use it in below iOS 13 is one of many reason that makes developers to not use swiftUI. Also stability of SwiftUI concerns developers to use in clients projects.
However, SwiftUI is improved, fast, easy and future, ",Considering a combination of both UIKit and SwiftUI for specific elements in the projects
7/25/2023 3:48:58,2-5 years,Swift,"Yes, we have completely adapted SwiftUI for the app","Faster development time, Declarative syntax for building UI, Enhanced responsiveness and fluid animations, Improved code readability and maintainability, Integration with SwiftUI's new features",,Moderately challenging,"Yes, exclusively SwiftUI",Regularly,,,,Fully adapting SwiftUI for the current projects built with UIKit
7/25/2023 7:24:58,2-5 years,Swift,"Yes, we have completely adapted SwiftUI for the app","Faster development time, Declarative syntax for building UI, Improved code readability and maintainability, Integration with SwiftUI's new features","Lack of familiarity with SwiftUI, Concerns about SwiftUI's maturity/stability",Moderately challenging,"Yes, exclusively SwiftUI",During development,It’s better show up,,,Fully adapting SwiftUI for the current projects built with UIKit
7/25/2023 9:57:20,5+ years,"Swift, React native ","Yes, extensively in View Controllers using UIHostingController","Faster development time, Declarative syntax for building UI, Integration with SwiftUI's new features",Concerns about SwiftUI's maturity/stability,Moderately challenging,"Yes, but only for certain projects",Regularly,Huge change within  a year,Yes cause less development time,Design using swift hi it’s very good and nice experience ,Considering a combination of both UIKit and SwiftUI for specific elements in the projects
7/27/2023 8:20:08,5+ years,"Swift, Objective-C","Yes, but only in some parts of the app using View Controllers using UIHostingController","Faster development time, Declarative syntax for building UI, Integration with SwiftUI's new features","Lack of familiarity with SwiftUI, Existing projects are built using UIKit",Moderately challenging,Undecided,Occasionally,"Our codebase is primarily built with UIKit, and while adding standalone new features in SwiftUI is straightforward, it takes a bit of work arounds to add SwiftUI components to existing screen elements. We haven't experimented that extensively anyway to identify any limitations, on the contrary it seems like anything you do in UIKit is also doable in SwiftUI but only needs a change in mindset. ",Yes. I do think it will be used heavily in the future and is worth investing your time on.,,Considering a combination of both UIKit and SwiftUI for specific elements in the projects
7/27/2023 19:25:37,2-5 years,Swift,"No, but I'm considering it","Faster development time, Declarative syntax for building UI, Integration with SwiftUI's new features","Existing projects are built using UIKit, Concerns about SwiftUI's maturity/stability, Compatibility issues with older iOS versions",,Undecided,Occasionally,,"For faster development of an app especially a prototype, I would.",,Considering a combination of both UIKit and SwiftUI for specific elements in the projects
7/30/2023 15:29:33,5+ years,"Swift, Objective-C","Yes, but only in some parts of the app using View Controllers using UIHostingController",Declarative syntax for building UI,,Moderately challenging,"Yes, exclusively SwiftUI",During development,Implementation of navigation when you want to extract navigation from views,"fast learning curve, easy to change, ",,Considering a combination of both UIKit and SwiftUI for specific elements in the projects
7/30/2023 17:05:55,2-5 years,Swift,"No, but I'm considering it",Faster UI development time. SwiftUI project may require a different architecture so can lead to slower development time in the beginning.,,Moderately challenging,"Yes, but only for certain projects",Occasionally,,Definitely for small apps. Won't disapprove for large apps but will say that UIKit is better as its more mature and easy to create large scale architecture while allowing any kind of UI.,"Just a comment on 3rd question in this survey about ""SwiftUI in your iOS app"", probably better to leave an ""other"" option too coz it didn't cover my scenario. I'm not adopting SwiftUI in any current UIKit app, however started a new project with all SwiftUI. And another new project with still UIKit. Haven't used UIHostingVC.
Thanks, hope it helps.","I don't think current UIKit project has to incorporate SwiftUI, UIKit is more powerful."
7/30/2023 23:29:36,1-2 years,Swift,"Yes, we have completely adapted SwiftUI for the app","Faster development time, Declarative syntax for building UI, Enhanced responsiveness and fluid animations, Improved code readability and maintainability, Integration with SwiftUI's new features, Easily add support for macOS, iPadOS, and visionOS with minimal effort.",,Not challenging at all,"Yes, exclusively SwiftUI",Regularly,"There are very infrequent instances where support for something isn't available in SwiftUI. At the time of my last app's development, the Add to Siri button was not available and therefore I had to wrap UIKit code in SwiftUI.","Absolutely. It's incredibly easy to use, much faster, and easier to read. Additionally, there is very little you need to do to deploy your UI on iOS, iPadOS, macOS, visionOS, etc.",,Fully adapting SwiftUI for the current projects built with UIKit
7/31/2023 1:25:30,5+ years,"Swift, Objective-C, C++","Yes, we have completely adapted SwiftUI for the app","Faster development time, Declarative syntax for building UI, Faster iterations when design isn’t dry","Concerns about SwiftUI's maturity/stability, Compatibility issues with older iOS versions",Somewhat challenging,"Yes, but only for certain projects",During development,You can easily write deep performance wholes in SwiftUi. Also it lacks a lot around modal animations and scroll tweeking,Yes,"Unless you code for iOS15+, SwiftUI isn’t worth it","Started doing a combination of both, until decided full SwiftUI to avoid animation problems "
8/2/2023 1:18:38,1-2 years,Swift,"Yes, we have completely adapted SwiftUI for the app","Faster development time, Declarative syntax for building UI, Enhanced responsiveness and fluid animations, Improved code readability and maintainability, Integration with SwiftUI's new features",,Moderately challenging,"Yes, exclusively SwiftUI",Regularly,,,,Considering a combination of both UIKit and SwiftUI for specific elements in the projects